name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            artifact_name: ocaml-crypto-linter-linux-amd64
          - os: macos-latest
            artifact_name: ocaml-crypto-linter-macos-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x
          dune-cache: true

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgmp-dev pkg-config

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gmp pkg-config

      - name: Install dependencies
        run: |
          opam install . --deps-only -y
          opam install semgrep -y

      - name: Build release binary
        run: |
          opam exec -- dune build --profile release
          cp _build/default/bin/main.exe ${{ matrix.artifact_name }}

      - name: Test binary
        run: |
          ./${{ matrix.artifact_name }} --version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes in this release" > changelog.md
          echo "" >> changelog.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~20)..HEAD >> changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: OCaml Crypto Linter ${{ github.event.inputs.tag || github.ref_name }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            artifacts/ocaml-crypto-linter-linux-amd64/ocaml-crypto-linter-linux-amd64
            artifacts/ocaml-crypto-linter-macos-amd64/ocaml-crypto-linter-macos-amd64

  publish-opam:
    name: Publish to OPAM
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x

      - name: Update OPAM files
        run: |
          TAG=${{ github.event.inputs.tag || github.ref_name }}
          VERSION=${TAG#v}
          sed -i "s/version: \".*\"/version: \"$VERSION\"/" ocaml-crypto-linter.opam

      - name: Submit to OPAM repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "To complete OPAM submission:"
          echo "1. Fork https://github.com/ocaml/opam-repository"
          echo "2. Add package to packages/ocaml-crypto-linter/ocaml-crypto-linter.$VERSION/"
          echo "3. Submit PR to opam-repository"

  build-docker:
    name: Build Docker Image
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/shaikko/ocaml-crypto-linter:latest
            ghcr.io/shaikko/ocaml-crypto-linter:${{ github.event.inputs.tag || github.ref_name }}