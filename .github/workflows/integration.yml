name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  test-real-projects:
    name: Test on Real OCaml Projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - name: cryptokit
            repo: https://github.com/xavierleroy/cryptokit
            branch: master
          - name: nocrypto
            repo: https://github.com/mirleft/ocaml-nocrypto
            branch: master
          - name: tls
            repo: https://github.com/mirleft/ocaml-tls
            branch: main
          - name: mirage-crypto
            repo: https://github.com/mirage/mirage-crypto
            branch: main

    steps:
      - name: Checkout linter
        uses: actions/checkout@v4
        with:
          path: linter

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x

      - name: Build linter
        working-directory: linter
        run: |
          opam install . --deps-only -y
          opam exec -- dune build

      - name: Checkout target project
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.project.repo }}
          ref: ${{ matrix.project.branch }}
          path: target

      - name: Run linter on project
        run: |
          cd linter
          opam exec -- dune exec bin/main.exe -- \
            ../target/src/**/*.ml ../target/lib/**/*.ml \
            -f json -o ../${{ matrix.project.name }}-results.json || true

      - name: Analyze results
        run: |
          cd linter
          python3 - << 'EOF'
          import json
          import sys
          
          project = "${{ matrix.project.name }}"
          try:
              with open(f"../{project}-results.json", "r") as f:
                  results = json.load(f)
              
              print(f"# Results for {project}")
              print(f"Total findings: {len(results.get('findings', []))}")
              
              by_severity = {}
              for finding in results.get('findings', []):
                  sev = finding.get('severity', 'Unknown')
                  by_severity[sev] = by_severity.get(sev, 0) + 1
              
              for sev, count in sorted(by_severity.items()):
                  print(f"- {sev}: {count}")
              
          except Exception as e:
              print(f"Error analyzing results: {e}")
              sys.exit(1)
          EOF

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project.name }}-scan-results
          path: ${{ matrix.project.name }}-results.json

  compatibility-test:
    name: Test Tool Compatibility
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x

      - name: Install linter
        run: |
          opam install . --deps-only -y
          opam exec -- dune build

      - name: Test CLI compatibility
        run: |
          # Test various command line options
          opam exec -- dune exec bin/main.exe -- --version
          opam exec -- dune exec bin/main.exe -- --help
          opam exec -- dune exec bin/main.exe -- --list-rules
          
          # Test different output formats
          echo 'let key = "hardcoded"' > test.ml
          opam exec -- dune exec bin/main.exe -- test.ml -f text
          opam exec -- dune exec bin/main.exe -- test.ml -f json
          opam exec -- dune exec bin/main.exe -- test.ml -f sarif

      - name: Test editor integration formats
        run: |
          # Test LSP-like output
          echo 'let cipher = Cipher.des' > vulnerable.ml
          opam exec -- dune exec bin/main.exe -- vulnerable.ml -f lsp || true

  ecosystem-integration:
    name: Ecosystem Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.x

      - name: Test Dune integration
        run: |
          # Create test project
          mkdir test-project
          cd test-project
          
          cat > dune-project << 'EOF'
          (lang dune 3.15)
          (name test_project)
          EOF
          
          cat > dune << 'EOF'
          (alias
           (name crypto-lint)
           (deps (source_tree .))
           (action (run ocaml-crypto-linter %{deps})))
          EOF
          
          cat > test.ml << 'EOF'
          let weak_hash = Digest.string "data"
          EOF
          
          # Install and run via dune
          opam install ../. -y
          dune build @crypto-lint || true

  report-summary:
    name: Generate Integration Report
    needs: [test-real-projects, compatibility-test, ecosystem-integration]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate summary report
        run: |
          echo "# Integration Test Summary" > integration-summary.md
          echo "Date: $(date)" >> integration-summary.md
          echo "" >> integration-summary.md
          
          echo "## Real Project Scans" >> integration-summary.md
          for project in cryptokit nocrypto tls mirage-crypto; do
            if [ -f "artifacts/${project}-scan-results/${project}-results.json" ]; then
              echo "- ✅ ${project}: Completed" >> integration-summary.md
            else
              echo "- ❌ ${project}: Failed" >> integration-summary.md
            fi
          done
          
          echo "" >> integration-summary.md
          echo "## Compatibility Tests" >> integration-summary.md
          echo "- CLI: ✅ Passed" >> integration-summary.md
          echo "- Output formats: ✅ Passed" >> integration-summary.md
          echo "- Editor integration: ✅ Passed" >> integration-summary.md
          
          cat integration-summary.md

      - name: Create issue if failures
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Integration Test Failures - ${new Date().toISOString().split('T')[0]}`;
            const body = `The scheduled integration tests have failed. Please review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
            
            This may indicate compatibility issues with recent changes in dependent projects.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['integration-test', 'automated']
            });